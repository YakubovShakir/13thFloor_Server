version: '3.8'

networks:
  app-network:
    driver: bridge

services:
  app:
    build:
      context: ./frontend
    environment:
      - NODE_ENV=test
    ports:
      - "4026:80"
    networks:
      - app-network

  backend:
    build:
      context: ./backend
    environment:
      - NODE_ENV=test
      - MONGO_URI=mongodb://databaseTest:27017/Floor?replicaSet=rs0
      - REDIS_HOST=redis-test  # Explicitly set for consistency
      - REDIS_PASSWORD=redis_password  # Add password for Redis
    ports:
      - "3026:3000"
    depends_on:
      databaseTest:
        condition: service_healthy
      redis-test:
        condition: service_healthy  # Ensure Redis is ready
    networks:
      - app-network

  game-timer:
    build:
      context: ./backend
    environment:
      - NODE_ENV=test
      - MONGO_URI=mongodb://databaseTest:27017/Floor?replicaSet=rs0
      - REDIS_HOST=redis-test
      - REDIS_PASSWORD=redis_password
    command: ["npm", "run", "gameTimer"]
    depends_on:
      databaseTest:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    networks:
      - app-network

  databaseTest:
    image: mongo:5
    volumes:
      - db-floor-tests:/data/db
      - ./restore-folder:/data/restore
    ports:
      - "127.0.0.1:27018:27017"
    command: mongod --replSet rs0 --bind_ip 0.0.0.0
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  bot:
    build:
      context: ./bot
    ports:
      - "127.0.0.1:4444:4444"
    networks:
      - app-network

  portainer:
    image: portainer/portainer-ce:latest
    ports:
      - "127.0.0.1:9000:9000"
      - "127.0.0.1:8000:8000"
    volumes:
      - portainer_data:/data
    networks:
      - app-network

  portainer-agent:
    image: portainer/agent:2.21.5
    container_name: portainer_agent
    restart: always
    ports:
      - "127.0.0.1:9001:9001"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
      - /:/host
    networks:
      - app-network

  mongo-init-replica:
    image: mongo:5
    depends_on:
      databaseTest:
        condition: service_healthy
    networks:
      - app-network
    command: >
      bash -c "sleep 10 && mongo --host databaseTest:27017 --eval 'rs.initiate({_id: \"rs0\", members: [{_id: 0, host: \"databaseTest:27017\"}]})' || echo 'Replica set already initialized'"
    restart: on-failure

  tx-daemon:
    build:
      context: ./backend
    environment:
      - NODE_ENV=test
      - MONGO_URI=mongodb://databaseTest:27017/Floor?replicaSet=rs0
      - REDIS_HOST=redis-test
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis_password
    command: ["node", "./src/daemons/tonAffiliateDaemon.js"]
    depends_on:
      databaseTest:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    networks:
      - app-network

  redis-test:
    image: redis:7
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    command: redis-server --requirepass redis_password --bind 0.0.0.0
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    restart: unless-stopped

volumes:
  db-floor-tests:
  portainer_data:
  redis-data: