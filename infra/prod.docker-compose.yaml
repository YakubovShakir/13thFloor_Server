version: '3.8'

networks:
  prod-network:
    driver: bridge

services:
  app-prod:
    build:
      context: ./frontend
    environment:
      - NODE_ENV=production
    ports:
      - "127.0.0.1:4026:80"
    networks:
      - prod-network

  backend-prod:
    build:
      context: ./backend
    environment:
      - NODE_ENV=production
      - MONGO_URI=mongodb://database-prod:27017/Floor?replicaSet=rs0&directConnection=true
      - REDIS_HOST=redis-prod
      - REDIS_PASSWORD=redis_password_prod
      - ELASTICSEARCH_HOSTS=http://elasticsearch-prod:9200
    ports:
      - "127.0.0.1:3026:3000"
    depends_on:
      database-prod:
        condition: service_healthy
      redis-prod:
        condition: service_healthy
      elasticsearch-prod:
        condition: service_healthy
    networks:
      - prod-network

  game-timer-prod:
    build:
      context: ./backend
    environment:
      - NODE_ENV=production
      - MONGO_URI=mongodb://database-prod:27017/Floor?replicaSet=rs0&directConnection=true
      - REDIS_HOST=redis-prod
      - REDIS_PASSWORD=redis_password_prod
    command: ["npm", "run", "gameTimer"]
    depends_on:
      database-prod:
        condition: service_healthy
      redis-prod:
        condition: service_healthy
    networks:
      - prod-network

  database-prod:
    image: mongo:5
    volumes:
      - db-floor-prod:/data/db
      - ./restore-folder:/data/restore
    ports:
      - "127.0.0.1:27019:27017"
    command: mongod --replSet rs0 --bind_ip 0.0.0.0
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - prod-network

  bot-prod:
    build:
      context: ./bot
    ports:
      - "127.0.0.1:4445:4444"
    networks:
      - prod-network

  portainer-prod:
    image: portainer/portainer-ce:latest
    ports:
      - "127.0.0.1:9002:9000"
      - "127.0.0.1:8001:8000"
    volumes:
      - portainer_data_prod:/data
    networks:
      - prod-network

  portainer-agent-prod:
    image: portainer/agent:2.21.5
    container_name: portainer_agent_prod
    restart: always
    ports:
      - "127.0.0.1:9003:9001"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
      - /:/host
    networks:
      - prod-network

  mongo-init-replica-prod:
    image: mongo:5
    depends_on:
      database-prod:
        condition: service_healthy
    networks:
      - prod-network
    command: >
      bash -c "sleep 10 && mongo --host database-prod:27017 --eval 'rs.initiate({_id: \"rs0\", members: [{_id: 0, host: \"database-prod:27017\"}]})' || echo 'Replica set already initialized'"
    restart: on-failure

  tx-daemon-prod:
    build:
      context: ./backend
    environment:
      - NODE_ENV=production
      - MONGO_URI=mongodb://database-prod:27017/Floor?replicaSet=rs0&directConnection=true
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis_password_prod
    command: ["node", "./src/daemons/tonAffiliateDaemon.js"]
    depends_on:
      database-prod:
        condition: service_healthy
      redis-prod:
        condition: service_healthy
    networks:
      - prod-network

  redis-prod:
    image: redis:7
    volumes:
      - redis-data-prod:/data
    ports:
      - "127.0.0.1:6380:6379"
    command: redis-server --requirepass redis_password_prod --bind 0.0.0.0
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "localhost", "-a", "redis_password_prod", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - prod-network
    restart: unless-stopped

  elasticsearch-prod:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    environment:
      - discovery.type=single-node
    volumes:
      - elasticsearch-data-prod:/usr/share/elasticsearch/data
    ports:
      - "127.0.0.1:9201:9200"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - prod-network

  kibana-prod:
    image: docker.elastic.co/kibana/kibana:7.10.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch-prod:9200
      - ELASTICSEARCH_USERNAME=elastic
    ports:
      - "127.0.0.1:5602:5601"
    depends_on:
      elasticsearch-prod:
        condition: service_healthy
    networks:
      - prod-network

  website:
    build:
      context: ./website
    restart: always
    ports:
      - "127.0.0.1:3003:80"
    networks:
      - prod-network

  mongo-export-prod:
    image: mongo:5
    volumes:
      - ./mongo-export-prod:/export
    depends_on:
      database-prod:
        condition: service_healthy
    networks:
      - prod-network
    command: >
      bash -c "while true; do
        mongoexport --host database-prod:27017 --db Floor --out /export/floor_export_$$(date +%Y%m%d_%H%M%S).json;
        sleep 1800;
      done"
    restart: unless-stopped

volumes:
  db-floor-prod:
  portainer_data_prod:
  redis-data-prod:
  elasticsearch-data-prod: