networks:
  default:

services:
  # tx-daemon:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   command: node ./src/daemons/tonAffiliateDaemon.js
  #   depends_on:
  #     database:
  #       condition: service_healthy  # Wait for MongoDB to be healthy
  #     redis:
  #       condition: service_healthy  # Wait for Redis to be healthy
  #   networks:
  #     - default
  #   restart: unless-stopped

  database:
    image: mongo:5
    volumes:
      - db-floor:/data/db
      - ./restore-folder:/data/restore
    ports:
      - 27017:27017
    command: mongod --replSet rs0 --bind_ip_all
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - default
    entrypoint: >
      /bin/bash -c "
      mongod --replSet rs0 --bind_ip_all & 
      sleep 5 && 
      mongo --eval 'rs.initiate({_id: \"rs0\", members: [{_id: 0, host: \"database:27017\"}]})' && 
      wait"
    restart: unless-stopped

  redis:
    image: redis:7
    volumes:
      - redis-data:/data
    ports:
      - 6379:6379
    command: redis-server --requirepass redis_password
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - default
    restart: unless-stopped

  game-timer:
    build:
      context: .
    environment:
      - NODE_ENV=test
      - MONGO_URI=mongodb://databaseTest:27017/Floor?replicaSet=rs0
      - REDIS_HOST=redis-test
      - REDIS_PASSWORD=redis_password
    command: ["npm", "run", "gameTimer"]
    instances: 5
    networks:
      - default

volumes:
  db-floor:
  redis-data: